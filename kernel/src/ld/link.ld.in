OUTPUT_FORMAT("elf32-i386")
ENTRY("_start")
STARTUP(@@STARTUP@@);
INHIBIT_COMMON_ALLOCATION;

SECTIONS {
    . = 0xC0000000;
    LDSYM_laddr_origin = .;

    /* The kernel starts at the first MiB of the fourth GiB. */
    . += 0x100000;
    LDSYM_laddr_kernel_start = ALIGN(0x1000);
    LDSYM_paddr_kernel_start = LDSYM_laddr_kernel_start - LDSYM_laddr_origin;

    /* The read-only section of the kernel. */
    LDSYM_laddr_kernel_ro_start = ALIGN(0x1000);
    LDSYM_paddr_kernel_ro_start = LDSYM_laddr_kernel_ro_start - LDSYM_laddr_origin;
    .text ALIGN(0x1000) : AT(ADDR(.text) - LDSYM_laddr_origin) {
        *(.text)
    }
    .rodata ALIGN(0x1000) : AT(ADDR(.rodata) - LDSYM_laddr_origin) {
        *(.rodata*)
    }
    .eh_frame ALIGN(0x1000) : AT(ADDR(.eh_frame) - LDSYM_laddr_origin) {
        KEEP(*(.eh_frame))
    }
    LDSYM_laddr_kernel_ro_end = .;
    LDSYM_paddr_kernel_ro_end = LDSYM_laddr_kernel_ro_end - LDSYM_laddr_origin;

    /* The read-write section of the kernel. */
    LDSYM_laddr_kernel_rw_start = ALIGN(0x1000);
    LDSYM_paddr_kernel_rw_start = LDSYM_laddr_kernel_rw_start - LDSYM_laddr_origin;
    .data ALIGN(0x1000) : AT(ADDR(.data) - LDSYM_laddr_origin) {
        *(.data)
    }
    .bss ALIGN(0x1000) : AT(ADDR(.bss) - LDSYM_laddr_origin) {
        *(.bss)

        . = ALIGN(0x1000);
        LDSYM_laddr_kernel_stack_bottom_fence = .;
        LDSYM_paddr_kernel_stack_bottom_fence = LDSYM_laddr_kernel_stack_bottom_fence - LDSYM_laddr_origin;
        . += 0x4000;
        LDSYM_laddr_kernel_stack_bottom = .;
        LDSYM_paddr_kernel_stack_bottom = LDSYM_laddr_kernel_stack_bottom - LDSYM_laddr_origin;
        . += 0x4000;
        LDSYM_laddr_kernel_stack_top = .;
        LDSYM_paddr_kernel_stack_top = LDSYM_laddr_kernel_stack_top - LDSYM_laddr_origin;
        . += 0x4000;
        LDSYM_laddr_kernel_stack_top_fence = .;
        LDSYM_paddr_kernel_stack_top_fence = LDSYM_laddr_kernel_stack_top_fence - LDSYM_laddr_origin;
    }
    LDSYM_laddr_kernel_rw_end = .;
    LDSYM_paddr_kernel_rw_end = LDSYM_laddr_kernel_rw_end - LDSYM_laddr_origin;

    /* The kernel ends after the last page is padded. */
    LDSYM_laddr_kernel_end = ALIGN(0x1000);
    LDSYM_paddr_kernel_end = LDSYM_laddr_kernel_end - LDSYM_laddr_origin;

    /* The stack of physical pages starts on the next page after
       the kernel ends. */
    LDSYM_laddr_kernel_pmmu_page_stack_bottom = ALIGN(0x1000);

    /* The kernel's heap is 256 MiB. */
    LDSYM_laddr_kernel_heap_start = 0xE0000000;
    LDSYM_laddr_kernel_heap_end   = LDSYM_laddr_kernel_heap_start + 0x10000000;

    /* The page directory for the current address space is always
       at the top 4 MiB. */
    LDSYM_laddr_page_directory = 0xFFC00000;
}
