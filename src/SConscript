# -*- mode: python -*-
Import('env')

# Create the SCons environment.
env = env.Clone(
    CC = 'toolchain/bin/i686-elf-gcc',
    CCFLAGS = [
        '-Wall',
        '-Wextra',
        '-Werror',
        '-Wno-unused-parameter',
        '-Wdeclaration-after-statement',
        '-ffreestanding',
        '-fstack-protector-all',
        '-fno-exceptions',
        '-std=c99',
        '-pedantic',
        '-gstabs+',
        '-g3',
        '-O0' if env['T'] == 'debug' else '-O2',
    ],
    ASFLAGS = [
        '-gstabs+',
        '-g3',
        '-O0' if env['T'] == 'debug' else '-O2',
        '-m32',
    ],
    LINKFLAGS = [
        '-ffreestanding',
        '-nostdlib',
        '-Wl,--fatal-warnings',
        '-Wl,--gc-sections',
        '-Wl,--print-gc-sections',
        '-Wl,-z,defs',
    ],
    CPPPATH = [
        '#include',
    ],
)

# Ask each subdirectory to build itself and return the object files
objects = []
objects += env.SConscript(dirs=['kernel', 'drivers', 'libs'], exports=['env'])

# Link all the object files together to create the kernel
kernel = env.SConscript('arch/i386/SConscript', exports=['env', 'objects'])
env.Alias('tacos', kernel)

# Create a bootable ISO image
iso = env.MkIsoFs(
    target='tacos.iso',
    source=[Dir('iso'),
            File('iso/boot/grub/menu.lst'),
            File('iso/boot/grub/stage2_eltorito'),
            env.Command('iso/boot/tacos', kernel, Copy('$TARGET', '$SOURCE')),
    ],
    MKISOFSFLAGS=['-R',
                  '-b', 'boot/grub/stage2_eltorito',
                  '-no-emul-boot',
                  '-boot-load-size', '4',
                  '-boot-info-table',
                  '-quiet',
    ],
)
env.Alias('tacos-iso', iso)

# Create the vmx file for testing
vmx = env.SConscript('test/SConscript', exports=['env', 'iso'])
env.Alias('tacos-vmx', vmx)

Default(['tacos-iso', 'tacos-vmx'])
