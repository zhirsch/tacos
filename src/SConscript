# -*- mode: python -*-
Import('env')

# Create the SCons environment.
env.Replace(
    CFLAGS    = ['-Wall',
                 '-Wextra',
                 '-Werror',
                 '-Wno-unused-parameter',
                 '-nostdinc',
                 '-ffreestanding',
                 '-iwithprefix', 'include',
                 '-std=c99',
                 '-pedantic',
                 '-gstabs+',
                 '-g3',
                 '-O0',
                 '-m32',
                 '-fno-stack-protector',
    ],
    ASFLAGS   = ['-gstabs+',
                 '-g3',
                 '-O0',
                 '-m32',
    ],
    LINKFLAGS = ['-nodefaultlibs',
                 '-nostartfiles',
                 '-nostdlib',
                 '-T$LINKER_SCRIPT',
                 '-m32',
                 '-Wl,--fatal-warnings',
    ],
    CPPPATH   = ['#include',
    ],
    LINKER_SCRIPT = env.File('ld/link.ld'),
)

# Ask each subdirectory to build itself and return the object files
objects = []
objects += env.SConscript(dirs=['kernel', 'drivers', 'libs', 'arch/i386'],
                          exports=['env'])

# Building the kernel depends on the linker script
env.Depends('tacos', '$LINKER_SCRIPT')
# XXX: I don't think there's a better way to get to boot.o ...
env.Depends('tacos', File('#bld/arch/i386/boot/boot.o'))

# Link all the object files together to create the kernel
kernel = env.Program(target='tacos', source=objects)
env.Alias('tacos', kernel)

# Create a bootable ISO image
iso = env.MkIsoFs(
    target='tacos.iso',
    source=[Dir('iso'),
            File('iso/boot/grub/menu.lst'),
            File('iso/boot/grub/stage2_eltorito'),
            env.Command('iso/boot/tacos', kernel, Copy('$TARGET', '$SOURCE')),
    ],
    MKISOFSFLAGS=['-R',
                  '-b', 'boot/grub/stage2_eltorito',
                  '-no-emul-boot',
                  '-boot-load-size', '4',
                  '-boot-info-table',
                  '-quiet',
    ],
)
env.Alias('tacos-iso', iso)
